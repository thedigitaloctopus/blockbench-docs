{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Creating a Plugin Download Blockbench on blockbench.net Welcome to the official Blockbench documentation. If you want to create a custom plugin, this is the place to start. First Steps Prerequisites To create a Blockbench plugin, you need basic knowledge of Javascript and Git, a working text editor like Sublime Text or VSCode and of course Blockbench Creating the plugin In this example we are going to create a small silly plugin that will randomize the height of all selected cubes. First, create a new file named height_randomizer.js . Open the file and create a self-invoking function to create a scope for global variables. Inside the function, create the variable button . (function() { var button; })(); Now we need to register the plugin. This process will give Blockbench all the required information to handle the plugin. In case the user is offline or loads the plugin from the computer, this will also provide the plugin metadata such as name and author for the plugin store. Write this code inside the function right after the button variable. Plugin.register('height_randomizer', { name: 'Height Randomizer', author: 'Yourname', description: 'This plugin can randomize the height of all selected cubes', icon: 'bar_chart', version: '0.0.1', variant: 'both' }); The variant tells Blockbench where the plugin can be used. In this case it can be used in both the web app and the desktop app. The icon uses a material icon string. You can learn more about icons here: Blockbench#icons Result If you have followed the steps above, you should end up with something like this: (function() { var button; Plugin.register('height_randomizer', { name: 'Height Randomizer', author: 'Yourname', description: 'This plugin can randomize the height of all selected cubes', icon: 'bar_chart', version: '0.0.1', variant: 'both', onload() { button = new Action('randomize_height', { name: 'Randomize Height', description: 'Randomize the height of all selected elements', icon: 'bar_chart' }); MenuBar.addAction(button, 'filter'); }, onunload() { button.delete(); } }); })();","title":"Getting Started"},{"location":"#creating-a-plugin","text":"Download Blockbench on blockbench.net Welcome to the official Blockbench documentation. If you want to create a custom plugin, this is the place to start.","title":"Creating a Plugin"},{"location":"#first-steps","text":"","title":"First Steps"},{"location":"#prerequisites","text":"To create a Blockbench plugin, you need basic knowledge of Javascript and Git, a working text editor like Sublime Text or VSCode and of course Blockbench","title":"Prerequisites"},{"location":"#creating-the-plugin","text":"In this example we are going to create a small silly plugin that will randomize the height of all selected cubes. First, create a new file named height_randomizer.js . Open the file and create a self-invoking function to create a scope for global variables. Inside the function, create the variable button . (function() { var button; })(); Now we need to register the plugin. This process will give Blockbench all the required information to handle the plugin. In case the user is offline or loads the plugin from the computer, this will also provide the plugin metadata such as name and author for the plugin store. Write this code inside the function right after the button variable. Plugin.register('height_randomizer', { name: 'Height Randomizer', author: 'Yourname', description: 'This plugin can randomize the height of all selected cubes', icon: 'bar_chart', version: '0.0.1', variant: 'both' }); The variant tells Blockbench where the plugin can be used. In this case it can be used in both the web app and the desktop app. The icon uses a material icon string. You can learn more about icons here: Blockbench#icons","title":"Creating the plugin"},{"location":"#result","text":"If you have followed the steps above, you should end up with something like this: (function() { var button; Plugin.register('height_randomizer', { name: 'Height Randomizer', author: 'Yourname', description: 'This plugin can randomize the height of all selected cubes', icon: 'bar_chart', version: '0.0.1', variant: 'both', onload() { button = new Action('randomize_height', { name: 'Randomize Height', description: 'Randomize the height of all selected elements', icon: 'bar_chart' }); MenuBar.addAction(button, 'filter'); }, onunload() { button.delete(); } }); })();","title":"Result"},{"location":"actions/","text":"Actions BarItems Toolbar Menu Action Tool Widgets","title":"Actions"},{"location":"actions/#actions","text":"","title":"Actions"},{"location":"actions/#baritems","text":"","title":"BarItems"},{"location":"actions/#toolbar","text":"","title":"Toolbar"},{"location":"actions/#menu","text":"","title":"Menu"},{"location":"actions/#action","text":"","title":"Action"},{"location":"actions/#tool","text":"","title":"Tool"},{"location":"actions/#widgets","text":"","title":"Widgets"},{"location":"blockbench/","text":"Blockbench The Blockbench object provides useful variables and methods to interact with general functionality of Blockbench. Information Blockbench.isWeb true if Blockbench is used in a web browser Blockbench.isMobile true if Blockbench is used in the mobile version Blockbench.version The installed version of Blockbench Blockbench.openTime Date object of the time Blockbench was opened Flags Flags can be used to save a binary state within an instance of Blockbench. Blockbench.addFlag( flag: String ) Blockbench.removeFlag( flag: String ) Blockbench.hasFlag( flag: String ) Import Blockbench.import( options: Object, callback: function ) Opens the file import dialog and reads the file. options startpath Path where to start the file dialog. Only works on desktop type Name of the file type. If unset, it will use the first extension extensions Array of extensions that can be imported multiple If true, multiple files can be selected and loaded readtype How to read the imported files. Can be image , buffer or text (default). title Title to use for the import dialog. Only works on desktop. errorbox Whether to display an error dialog if Blockbench can't load the file callback Called after all files have been read. files: Array Imported and read files path Path to the file. Will only return the name in the web app name File name content Content of the file. String for plain text files, base64 string for images (only .tga images or images on the web app) Blockbench.read( paths, options, callback ) Reads one or multiple files at a fixed path. Only available on desktop app. paths: Array List of file paths. options: Object Import options. readtype: String How to read the imported files. Can be image , buffer or text (default). errorbox: Boolean Whether to display an error dialog if Blockbench can't load the file callback : Function. Called after all files have been read. files : Array of imported and read files path: String Path to the file. Will only return the name in the web app name: String File name content: String Content of the file. String for plain text files, base64 string for images (only .tga images or images on the web app) Export Blockbench.export( options, callback ) Opens a file save dialog to ask where to save the file. In most browsers, the file will just get downloaded with the default name. options : Object startpath Path where to start the file dialog. Only works on desktop type Name of the file type extensions Array of possible extensions name Suggested file name. Gets overwritten by startpath. content Content of the file. Can be a string for plain text files or a base64 string or path for images. savetype How to save the file. Can be text (default), image or zip . custom_writer In the desktop app, you can use this to create a custom function to save the file. This can be used to merge with the old file for example. Has two arguments: content and path . callback : Function. Called after the file has been exported. path The path the file has been exported to. Only on desktop app. Blockbench.writeFile( path, options, callback ) Writes a file at the specified path. path : File path options : Object content Content of the file. Can be a string for plain text files or a base64 string or path for images. savetype How to save the file. Can be text (default), image or zip . custom_writer In the desktop app, you can use this to create a custom function to save the file. This can be used to merge with the old file for example. Has two arguments: content and path . callback : Function. Called after the file has been exported. path The path the file has been exported to. Events Listen to and dispatch Blockbench-specific events Blockbench.on( event_id, callback ) Runs a function when Blockbench emits a specific event event_id Event to listen for callback Function to execute. Has one argument data . Blockbench.dispatchEvent( event_id, data ) Triggers an event. event_id Name of the event, data Data to submit to the listeners Blockbench.removeEventListener( event_id, callback) Removes an event listener using the event_id and callback . Should be used in onunload in a plugin to clear event listeners. List of Blockbench events Event ID Description remove_animation Emitted after a user removes an animation display_animation_frame Emitted when Blockbench renders a frame of an animation before_closing create_session join_session quit_session send_session_data receive_session_data user_joins_session user_leaves_session process_chat_message update_settings save_project load_project new_project close_project add_cube add_group update_selection select_all added_to_selection invert_selection canvas_select change_texture_path add_texture finish_edit finished_edit undo redo Drag and Drop Files Blockbench.addDragHandler( id, options, callback ) Handles file drop events for the specified file types id ID of the handler options : Objecct extensions Array of extensions that will trigger this handler element addClass propagate readtype How to read the dropped files. See Blockbench.read errorbox Whether to show an error message if Blockbench fails to load the file. callback : Function. Called after all files have been read. files : Array of imported and read files path Path to the file. Will only return the name in the web app name File name content Content of the file. String for plain text files, base64 string for images (only .tga images or images on the web app) Blockbench.removeDragHandler( id ) Removes and disables a drag handler using its ID. Icons Icons are used throughout Blockbench in actions, menus and plugins. Google Material icons, Font Awesome Regular, Solid and Brands as well as a set of custom Blockbench icons are available. Blockbench.getIconNode( string[, color]) Returns a HTML node for the specified icon. string Specifies the pack and name of the icon. Strings starting with fa return Font Awesome icons. Example: 'fa-bone' Prepend far. or fas. to choose between regular and solid icons. Example: 'fas.fa-circle' Regular strings will return a Google Materials Icon Strings starting with icon- will return custom Blockbench icons (see list below) Base64 image strings will return an image/texture in icon format Passing a function will run the function and use the return value to determine the icon If undefined, it will return a question mark icon color Optional. Colors the icon in a specific color. Can be x , y or z for a generic axis color or a CSS color string for a custom color. Available Icons Google Material Icons Font Awesome Free Icons Custom Blockbench icons: icon-mirror_x icon-mirror_y icon-mirror_z icon-saved icon-player icon-player_head icon-zombie icon-baby_zombie icon-armor_stand icon-armor_stand_small icon-ground icon-hud icon-inventory_full icon-inventory_nine icon-inventory_single icon-bow icon-crossbow icon-x11 icon-blockbench icon-blockbench_inverted icon-vertexsnap icon-create_bitmap icon-objects icon-bb_interface icon-sketchfab icon-optifine_file icon-format_bedrock icon-format_block icon-format_free icon-format_java icon-format_optifine icon-format_bedrock_legacy","title":"Blockbench"},{"location":"blockbench/#blockbench","text":"The Blockbench object provides useful variables and methods to interact with general functionality of Blockbench.","title":"Blockbench"},{"location":"blockbench/#information","text":"Blockbench.isWeb true if Blockbench is used in a web browser Blockbench.isMobile true if Blockbench is used in the mobile version Blockbench.version The installed version of Blockbench Blockbench.openTime Date object of the time Blockbench was opened","title":"Information"},{"location":"blockbench/#flags","text":"Flags can be used to save a binary state within an instance of Blockbench.","title":"Flags"},{"location":"blockbench/#blockbenchaddflag-flag-string","text":"","title":"Blockbench.addFlag( flag: String )"},{"location":"blockbench/#blockbenchremoveflag-flag-string","text":"","title":"Blockbench.removeFlag( flag: String )"},{"location":"blockbench/#blockbenchhasflag-flag-string","text":"","title":"Blockbench.hasFlag( flag: String )"},{"location":"blockbench/#import","text":"","title":"Import"},{"location":"blockbench/#blockbenchimport-options-object-callback-function","text":"Opens the file import dialog and reads the file. options startpath Path where to start the file dialog. Only works on desktop type Name of the file type. If unset, it will use the first extension extensions Array of extensions that can be imported multiple If true, multiple files can be selected and loaded readtype How to read the imported files. Can be image , buffer or text (default). title Title to use for the import dialog. Only works on desktop. errorbox Whether to display an error dialog if Blockbench can't load the file callback Called after all files have been read. files: Array Imported and read files path Path to the file. Will only return the name in the web app name File name content Content of the file. String for plain text files, base64 string for images (only .tga images or images on the web app)","title":"Blockbench.import( options: Object, callback: function )"},{"location":"blockbench/#blockbenchread-paths-options-callback","text":"Reads one or multiple files at a fixed path. Only available on desktop app. paths: Array List of file paths. options: Object Import options. readtype: String How to read the imported files. Can be image , buffer or text (default). errorbox: Boolean Whether to display an error dialog if Blockbench can't load the file callback : Function. Called after all files have been read. files : Array of imported and read files path: String Path to the file. Will only return the name in the web app name: String File name content: String Content of the file. String for plain text files, base64 string for images (only .tga images or images on the web app)","title":"Blockbench.read( paths, options, callback )"},{"location":"blockbench/#export","text":"","title":"Export"},{"location":"blockbench/#blockbenchexport-options-callback","text":"Opens a file save dialog to ask where to save the file. In most browsers, the file will just get downloaded with the default name. options : Object startpath Path where to start the file dialog. Only works on desktop type Name of the file type extensions Array of possible extensions name Suggested file name. Gets overwritten by startpath. content Content of the file. Can be a string for plain text files or a base64 string or path for images. savetype How to save the file. Can be text (default), image or zip . custom_writer In the desktop app, you can use this to create a custom function to save the file. This can be used to merge with the old file for example. Has two arguments: content and path . callback : Function. Called after the file has been exported. path The path the file has been exported to. Only on desktop app.","title":"Blockbench.export( options, callback )"},{"location":"blockbench/#blockbenchwritefile-path-options-callback","text":"Writes a file at the specified path. path : File path options : Object content Content of the file. Can be a string for plain text files or a base64 string or path for images. savetype How to save the file. Can be text (default), image or zip . custom_writer In the desktop app, you can use this to create a custom function to save the file. This can be used to merge with the old file for example. Has two arguments: content and path . callback : Function. Called after the file has been exported. path The path the file has been exported to.","title":"Blockbench.writeFile( path, options, callback )"},{"location":"blockbench/#events","text":"Listen to and dispatch Blockbench-specific events","title":"Events"},{"location":"blockbench/#blockbenchon-event_id-callback","text":"Runs a function when Blockbench emits a specific event event_id Event to listen for callback Function to execute. Has one argument data .","title":"Blockbench.on( event_id, callback )"},{"location":"blockbench/#blockbenchdispatchevent-event_id-data","text":"Triggers an event. event_id Name of the event, data Data to submit to the listeners","title":"Blockbench.dispatchEvent( event_id, data )"},{"location":"blockbench/#blockbenchremoveeventlistener-event_id-callback","text":"Removes an event listener using the event_id and callback . Should be used in onunload in a plugin to clear event listeners.","title":"Blockbench.removeEventListener( event_id, callback)"},{"location":"blockbench/#list-of-blockbench-events","text":"Event ID Description remove_animation Emitted after a user removes an animation display_animation_frame Emitted when Blockbench renders a frame of an animation before_closing create_session join_session quit_session send_session_data receive_session_data user_joins_session user_leaves_session process_chat_message update_settings save_project load_project new_project close_project add_cube add_group update_selection select_all added_to_selection invert_selection canvas_select change_texture_path add_texture finish_edit finished_edit undo redo","title":"List of Blockbench events"},{"location":"blockbench/#drag-and-drop-files","text":"","title":"Drag and Drop Files"},{"location":"blockbench/#blockbenchadddraghandler-id-options-callback","text":"Handles file drop events for the specified file types id ID of the handler options : Objecct extensions Array of extensions that will trigger this handler element addClass propagate readtype How to read the dropped files. See Blockbench.read errorbox Whether to show an error message if Blockbench fails to load the file. callback : Function. Called after all files have been read. files : Array of imported and read files path Path to the file. Will only return the name in the web app name File name content Content of the file. String for plain text files, base64 string for images (only .tga images or images on the web app)","title":"Blockbench.addDragHandler( id, options, callback )"},{"location":"blockbench/#blockbenchremovedraghandler-id","text":"Removes and disables a drag handler using its ID.","title":"Blockbench.removeDragHandler( id )"},{"location":"blockbench/#icons","text":"Icons are used throughout Blockbench in actions, menus and plugins. Google Material icons, Font Awesome Regular, Solid and Brands as well as a set of custom Blockbench icons are available.","title":"Icons"},{"location":"blockbench/#blockbenchgeticonnode-string-color","text":"Returns a HTML node for the specified icon. string Specifies the pack and name of the icon. Strings starting with fa return Font Awesome icons. Example: 'fa-bone' Prepend far. or fas. to choose between regular and solid icons. Example: 'fas.fa-circle' Regular strings will return a Google Materials Icon Strings starting with icon- will return custom Blockbench icons (see list below) Base64 image strings will return an image/texture in icon format Passing a function will run the function and use the return value to determine the icon If undefined, it will return a question mark icon color Optional. Colors the icon in a specific color. Can be x , y or z for a generic axis color or a CSS color string for a custom color.","title":"Blockbench.getIconNode( string[, color])"},{"location":"blockbench/#available-icons","text":"Google Material Icons Font Awesome Free Icons Custom Blockbench icons: icon-mirror_x icon-mirror_y icon-mirror_z icon-saved icon-player icon-player_head icon-zombie icon-baby_zombie icon-armor_stand icon-armor_stand_small icon-ground icon-hud icon-inventory_full icon-inventory_nine icon-inventory_single icon-bow icon-crossbow icon-x11 icon-blockbench icon-blockbench_inverted icon-vertexsnap icon-create_bitmap icon-objects icon-bb_interface icon-sketchfab icon-optifine_file icon-format_bedrock icon-format_block icon-format_free icon-format_java icon-format_optifine icon-format_bedrock_legacy","title":"Available Icons"},{"location":"formats/","text":"Formats ModelFormat A model format can describe how a specific type of model can be made: Which features are available, which modes can be accessed and to which file formats can the model be exported. new ModelFormat( data ) data Object id Format ID name Format name description Format description show_on_start_screen Whether to list the format as an option on the start screen box_uv Whether to enable box UV in the format optional_box_uv Allows the user to enable or disable box UV within the format single_texture Only allow one single texture at a time bone_rig Whether to use groups as a bone rig rotate_cubes Allow the user to rotate cubes integer_size Limit cube sizes to full integers locators Enable Locators canvas_limit Enable the 3x3x3 model size limmit rotation_limit Enable the rotation limit to 22.5 degrees and one axis display_mode Enable the display mode animation_mode Enable animations codec Which Codec to use as the default codec for the format onActivation Function to run on activation of the format onDeactivation Function to run on deactivation of the format Format.select() Selects the format Format.new() Creates a new project using this format. Format.convertTo() Convert the model to this format Codec Codecs are used to define specific file formats. Codecs can have an importer and an exporter as well as a few other functions that can be overwritten to achieve custom import and export behavior. new Codec(id, data) id ID of the Codec data Object name Name of the Codec extension Default extension for the codec remember Boolean. Whether to remember the model in the recent files list and as the opened model file. export_action Default action used to export for this format. compile() Should return the compiled model parse( model, path ) Parse and add the provided model to Blockbench export() Overwrite the default export function load( model, file, add ) Overwrite the default load function fileName() Returns the suggested file name for exported files filePath Returns the suggested start path for the export dialog afterDownload Called after a model has successfully been downloaded. Displays the success message afterSave(path) Overwrite the default afterSave function","title":"Formats"},{"location":"formats/#formats","text":"","title":"Formats"},{"location":"formats/#modelformat","text":"A model format can describe how a specific type of model can be made: Which features are available, which modes can be accessed and to which file formats can the model be exported.","title":"ModelFormat"},{"location":"formats/#new-modelformat-data","text":"data Object id Format ID name Format name description Format description show_on_start_screen Whether to list the format as an option on the start screen box_uv Whether to enable box UV in the format optional_box_uv Allows the user to enable or disable box UV within the format single_texture Only allow one single texture at a time bone_rig Whether to use groups as a bone rig rotate_cubes Allow the user to rotate cubes integer_size Limit cube sizes to full integers locators Enable Locators canvas_limit Enable the 3x3x3 model size limmit rotation_limit Enable the rotation limit to 22.5 degrees and one axis display_mode Enable the display mode animation_mode Enable animations codec Which Codec to use as the default codec for the format onActivation Function to run on activation of the format onDeactivation Function to run on deactivation of the format","title":"new ModelFormat( data )"},{"location":"formats/#formatselect","text":"Selects the format","title":"Format.select()"},{"location":"formats/#formatnew","text":"Creates a new project using this format.","title":"Format.new()"},{"location":"formats/#formatconvertto","text":"Convert the model to this format","title":"Format.convertTo()"},{"location":"formats/#codec","text":"Codecs are used to define specific file formats. Codecs can have an importer and an exporter as well as a few other functions that can be overwritten to achieve custom import and export behavior.","title":"Codec"},{"location":"formats/#new-codecid-data","text":"id ID of the Codec data Object name Name of the Codec extension Default extension for the codec remember Boolean. Whether to remember the model in the recent files list and as the opened model file. export_action Default action used to export for this format. compile() Should return the compiled model parse( model, path ) Parse and add the provided model to Blockbench export() Overwrite the default export function load( model, file, add ) Overwrite the default load function fileName() Returns the suggested file name for exported files filePath Returns the suggested start path for the export dialog afterDownload Called after a model has successfully been downloaded. Displays the success message afterSave(path) Overwrite the default afterSave function","title":"new Codec(id, data)"},{"location":"modes/","text":"Modes new Mode( data: Object ) data id: String name: String category: String Category of this mode's keybinding. default_tool: Tool Default tool that gets selected when joining this mode. center_windows: Array Which center windows are visible in this mode. Options are 'preview' , 'timeline' and 'start_screen' . selectCubes: Boolean Whether the user can select cubes by left clicking in the preview hide_toolbars: Boolean Hides the main toolbar condition: Condition onSelect: Function onUnselect: Function Mode#select() Selects this mode. Mode#selected Boolean. Returns whether this mode is selected. Modes.vue.$forceUpdate() Forces the mode tab menu to update. This may be necessary after adding new modes or changing certain properties.","title":"Modes"},{"location":"modes/#modes","text":"","title":"Modes"},{"location":"modes/#new-mode-data-object","text":"data id: String name: String category: String Category of this mode's keybinding. default_tool: Tool Default tool that gets selected when joining this mode. center_windows: Array Which center windows are visible in this mode. Options are 'preview' , 'timeline' and 'start_screen' . selectCubes: Boolean Whether the user can select cubes by left clicking in the preview hide_toolbars: Boolean Hides the main toolbar condition: Condition onSelect: Function onUnselect: Function","title":"new Mode( data: Object )"},{"location":"modes/#modeselect","text":"Selects this mode.","title":"Mode#select()"},{"location":"modes/#modeselected","text":"Boolean. Returns whether this mode is selected.","title":"Mode#selected"},{"location":"modes/#modesvueforceupdate","text":"Forces the mode tab menu to update. This may be necessary after adding new modes or changing certain properties.","title":"Modes.vue.$forceUpdate()"},{"location":"outliner/","text":"Outliner Outliner management OutlinerElement() Parent of all groups and elements in the outliner. All properties and methods can be used on groups and elements. title Title used for the hover tooltip type Type of the group or element menu Context menu of the group or element type. selected Array (or single object in case of group) or the selected elements of this type all Array of all groups or elements of this type OutlinerElement.init() Initializes the element so it can be used in the outliner. OutlinerElement.addTo( destination ) Adds the element to a specific place in the outliner. * destination Can be a group, element or undefined for the outliner root. OutlinerElement.sortInBefore( destination, index_mod ) Sorts the element in before another element. * destination Reference group or element * index_mod Modifier for the index. If 1, the element will be placed after (below) the destination. OutlinerElement.getParentArray() Returns the children array of the parent that the group or element is in. OutlinerElement.showInOutliner() Unfolds the outliner and scrolls up or down if necessary to show the group or element. OutlinerElement.updateElement() Updates the Vue node of the element. OutlinerElement.remove() Removes the element. OutlinerElement.rename() Marks the name of the group or element in the outliner for renaming. OutlinerElement.saveName() Saves the changed name of the element by creating an undo point and making the name unique if necessary. OutlinerElement.createUniqueName() Create a unique name for the group or element by adding a number at the end or increasing it. OutlinerElement.isChildOf( group, max_levels ) Checks of the group or element is a child of group . * group A group * max_levels The maximum number of generations that can be between the element and group . OutlinerElement.showContextMenu( event ) Displays the context menu of the element * event . Mouse event, determines where the context menu spawns. Group new Group( data ) data Object name Group name children Array of the groups content origin Array of the group pivot point rotation Array of the group rotation reset If a bone, whether to reset the informations of inherited bones in bedrock edition. shade Whether to shade the contents of the group selected Whether the group is selected visibility Whether the group is visible export Whether to export the entire group autouv Auto UV setting for the children. Can be 0, 1 or 2. parent Parent group or 'root' isOpen Whether the group is currently opened in the outliner mesh 3D representation of the group when using bone rig Group.selected Static variable to get the currently selected groups. Note that children groups of this group can also have selected to make them appear selected in the outliner, but will not be treated as the primary selected group Group.extend( data ) Modify data of the group. * data Object of properties to apply to the group Group.selectChildren( event ) Select the children of the group Group.selectLow( highlight ) Select the group and its children without marking it the selected group. * highlight Whether to highlight the group in the selection color in the outliner. Default is true. Group.unselect() Unselects the group Group.matchesSelection() Returns true if the content of the group matches the current selection. Group.openUp() Opens the group and all of its ancestor groups. Group.remove( undo ) Removes the group * undo If true, an undo point will be created. Group.resolve() Remove the group and leave all of its children in the parent array. Group.transferOrigin( origin ) Move the origin of a bone to a specific location without visually affecting the position of it's content. * origin Array of the new 3D origin Group.sortContent() Sort the content of the group alphabetically. This will automatically create an undo point. Group.duplicate() Duplicate the group Group.getSaveCopy() Returns a copy of the group that can be used to save the group to a JSON file. Group.getChildlessCopy() Returns a copy of the group without the children. Internally used by the duplicate function. Group.compile( undo ) Generates a copy of the group that can be used for undo points or to save in block model files. * undo Make the copy work for undo points. Group.forEachChild( callback, type, for_self ) Run a funtion for each child of the group recursively. * callback Function to run for each child. First argument is the child. * type For which type to run the function. Can be Group , NonGroup , Cube etc. or undefined. * for_self Whether to also run the function on itself. Cube Cubes represent regular cubes in the outliner. Cubes inherit all properties and methods from OutlinerElement and NonGroup. new Cube( data ).init() Creates a new cube and initializes it. name: String from: Array First corner of the cube, relative to cube space to: Array Second corner of the cube origin: Array Cube pivot point rotation: Array Cube rotation inflate: Number Inflate value uv_offset: Array[2] Box UV offset coordinates visibility: Boolean autouv: Number Auto UV setting. Can be 0, 1 or 2. export: Boolean Whether to include the cube in exported files. mirror_uv: Boolean Mirrors the UV on the X axis if using box UV shade: Boolean color: Number Base cube color as shown when untextured or in the outliner. Number between 0 and 7 mapping to the 8 colors. 0. Light Blue 1. Yellow 2. Orange 4. Red 4. Purple 5. Blue 6. Green 7. Lime parent: String faces: Object cube.extend( data: Object ) Copies properties from data to the cube. cube.size( axis: Number, floored: Boolean ) Returns the size of the cube on a specific axis or as an array. * floored If true, the size will be floored to get the assumed size to calculate box UV. Locator","title":"Outliner"},{"location":"outliner/#outliner","text":"","title":"Outliner"},{"location":"outliner/#outliner-management","text":"","title":"Outliner management"},{"location":"outliner/#outlinerelement","text":"Parent of all groups and elements in the outliner. All properties and methods can be used on groups and elements. title Title used for the hover tooltip type Type of the group or element menu Context menu of the group or element type. selected Array (or single object in case of group) or the selected elements of this type all Array of all groups or elements of this type","title":"OutlinerElement()"},{"location":"outliner/#outlinerelementinit","text":"Initializes the element so it can be used in the outliner.","title":"OutlinerElement.init()"},{"location":"outliner/#outlinerelementaddto-destination","text":"Adds the element to a specific place in the outliner. * destination Can be a group, element or undefined for the outliner root.","title":"OutlinerElement.addTo( destination )"},{"location":"outliner/#outlinerelementsortinbefore-destination-index_mod","text":"Sorts the element in before another element. * destination Reference group or element * index_mod Modifier for the index. If 1, the element will be placed after (below) the destination.","title":"OutlinerElement.sortInBefore( destination, index_mod )"},{"location":"outliner/#outlinerelementgetparentarray","text":"Returns the children array of the parent that the group or element is in.","title":"OutlinerElement.getParentArray()"},{"location":"outliner/#outlinerelementshowinoutliner","text":"Unfolds the outliner and scrolls up or down if necessary to show the group or element.","title":"OutlinerElement.showInOutliner()"},{"location":"outliner/#outlinerelementupdateelement","text":"Updates the Vue node of the element.","title":"OutlinerElement.updateElement()"},{"location":"outliner/#outlinerelementremove","text":"Removes the element.","title":"OutlinerElement.remove()"},{"location":"outliner/#outlinerelementrename","text":"Marks the name of the group or element in the outliner for renaming.","title":"OutlinerElement.rename()"},{"location":"outliner/#outlinerelementsavename","text":"Saves the changed name of the element by creating an undo point and making the name unique if necessary.","title":"OutlinerElement.saveName()"},{"location":"outliner/#outlinerelementcreateuniquename","text":"Create a unique name for the group or element by adding a number at the end or increasing it.","title":"OutlinerElement.createUniqueName()"},{"location":"outliner/#outlinerelementischildof-group-max_levels","text":"Checks of the group or element is a child of group . * group A group * max_levels The maximum number of generations that can be between the element and group .","title":"OutlinerElement.isChildOf( group, max_levels )"},{"location":"outliner/#outlinerelementshowcontextmenu-event","text":"Displays the context menu of the element * event . Mouse event, determines where the context menu spawns.","title":"OutlinerElement.showContextMenu( event )"},{"location":"outliner/#group","text":"","title":"Group"},{"location":"outliner/#new-group-data","text":"data Object name Group name children Array of the groups content origin Array of the group pivot point rotation Array of the group rotation reset If a bone, whether to reset the informations of inherited bones in bedrock edition. shade Whether to shade the contents of the group selected Whether the group is selected visibility Whether the group is visible export Whether to export the entire group autouv Auto UV setting for the children. Can be 0, 1 or 2. parent Parent group or 'root' isOpen Whether the group is currently opened in the outliner mesh 3D representation of the group when using bone rig","title":"new Group( data )"},{"location":"outliner/#groupselected","text":"Static variable to get the currently selected groups. Note that children groups of this group can also have selected to make them appear selected in the outliner, but will not be treated as the primary selected group","title":"Group.selected"},{"location":"outliner/#groupextend-data","text":"Modify data of the group. * data Object of properties to apply to the group","title":"Group.extend( data )"},{"location":"outliner/#groupselectchildren-event","text":"Select the children of the group","title":"Group.selectChildren( event )"},{"location":"outliner/#groupselectlow-highlight","text":"Select the group and its children without marking it the selected group. * highlight Whether to highlight the group in the selection color in the outliner. Default is true.","title":"Group.selectLow( highlight )"},{"location":"outliner/#groupunselect","text":"Unselects the group","title":"Group.unselect()"},{"location":"outliner/#groupmatchesselection","text":"Returns true if the content of the group matches the current selection.","title":"Group.matchesSelection()"},{"location":"outliner/#groupopenup","text":"Opens the group and all of its ancestor groups.","title":"Group.openUp()"},{"location":"outliner/#groupremove-undo","text":"Removes the group * undo If true, an undo point will be created.","title":"Group.remove( undo )"},{"location":"outliner/#groupresolve","text":"Remove the group and leave all of its children in the parent array.","title":"Group.resolve()"},{"location":"outliner/#grouptransferorigin-origin","text":"Move the origin of a bone to a specific location without visually affecting the position of it's content. * origin Array of the new 3D origin","title":"Group.transferOrigin( origin )"},{"location":"outliner/#groupsortcontent","text":"Sort the content of the group alphabetically. This will automatically create an undo point.","title":"Group.sortContent()"},{"location":"outliner/#groupduplicate","text":"Duplicate the group","title":"Group.duplicate()"},{"location":"outliner/#groupgetsavecopy","text":"Returns a copy of the group that can be used to save the group to a JSON file.","title":"Group.getSaveCopy()"},{"location":"outliner/#groupgetchildlesscopy","text":"Returns a copy of the group without the children. Internally used by the duplicate function.","title":"Group.getChildlessCopy()"},{"location":"outliner/#groupcompile-undo","text":"Generates a copy of the group that can be used for undo points or to save in block model files. * undo Make the copy work for undo points.","title":"Group.compile( undo )"},{"location":"outliner/#groupforeachchild-callback-type-for_self","text":"Run a funtion for each child of the group recursively. * callback Function to run for each child. First argument is the child. * type For which type to run the function. Can be Group , NonGroup , Cube etc. or undefined. * for_self Whether to also run the function on itself.","title":"Group.forEachChild( callback, type, for_self )"},{"location":"outliner/#cube","text":"Cubes represent regular cubes in the outliner. Cubes inherit all properties and methods from OutlinerElement and NonGroup.","title":"Cube"},{"location":"outliner/#new-cube-data-init","text":"Creates a new cube and initializes it. name: String from: Array First corner of the cube, relative to cube space to: Array Second corner of the cube origin: Array Cube pivot point rotation: Array Cube rotation inflate: Number Inflate value uv_offset: Array[2] Box UV offset coordinates visibility: Boolean autouv: Number Auto UV setting. Can be 0, 1 or 2. export: Boolean Whether to include the cube in exported files. mirror_uv: Boolean Mirrors the UV on the X axis if using box UV shade: Boolean color: Number Base cube color as shown when untextured or in the outliner. Number between 0 and 7 mapping to the 8 colors. 0. Light Blue 1. Yellow 2. Orange 4. Red 4. Purple 5. Blue 6. Green 7. Lime parent: String faces: Object","title":"new Cube( data ).init()"},{"location":"outliner/#cubeextend-data-object","text":"Copies properties from data to the cube.","title":"cube.extend( data: Object )"},{"location":"outliner/#cubesize-axis-number-floored-boolean","text":"Returns the size of the cube on a specific axis or as an array. * floored If true, the size will be floored to get the assumed size to calculate box UV.","title":"cube.size( axis: Number, floored: Boolean )"},{"location":"outliner/#locator","text":"","title":"Locator"},{"location":"plugin/","text":"Plugin Creating a plugin Plugins consist of a Javascript file. To create a plugin, create a new Javascript file named [plugin-id].js . Inside this file, use the method Plugin.register to initialize the plugin, as seen in the example. Note that the plugin ID should be the same as the file name minus extension. Plugin.register('plugin_id', { title: 'Plugin Name', author: 'Your Name', icon: 'icon', description: 'Your Description', version: '1.0.0', variant: 'both', onload() { } }); title Plugin title as shown in the store in Blockbench author Author name or names description Plugin description for the store in Blockbench about Longer Plugin description or instructions, can be unfolded in the store icon Blockbench icon string, see Blockbench#icons version Version number for your plugin using semver variant Variant of Blockbench which supports your plugin. Can be desktop , web or both onload function. Runs whenever the plugin is loaded or after a reload onunload function. Runs whenever the plugin unloads oninstall function. Runs when the player installs the plugin onuninstall function. Runs when the player uninstalls the plugin If you want to declare variables that can be used anywhere within the plugin, you can wrap your whole within a self-invoking function and create variables like this: (function() { var plugin_variable_1; Plugin.register('plugin_id', { onload() { plugin_variable_1 = 'foo'; }, ... }); })(); To test your plugin, you can load it from the plugin menu using the button in the title bar, or you can simply drag and drop it into Blockbench. Use the Plugin menu or press Ctrl/Cmd + J to reload it. Submitting your plugin For testing or internal use you can load the plugin from the file. If you think your plugin can be useful for a larger group of users, you can submit it to the blockbench-plugins repository . To submit a plugin, fork the repository and add your plugin to the /plugins folder. Then add your plugin to the plugins.json file using the same ID and metadata as in your plugin file. When you are done, create a pull request and wait for it to be merged. Use the same process to submit updates and changes to your plugin.","title":"Plugin"},{"location":"plugin/#plugin","text":"","title":"Plugin"},{"location":"plugin/#creating-a-plugin","text":"Plugins consist of a Javascript file. To create a plugin, create a new Javascript file named [plugin-id].js . Inside this file, use the method Plugin.register to initialize the plugin, as seen in the example. Note that the plugin ID should be the same as the file name minus extension. Plugin.register('plugin_id', { title: 'Plugin Name', author: 'Your Name', icon: 'icon', description: 'Your Description', version: '1.0.0', variant: 'both', onload() { } }); title Plugin title as shown in the store in Blockbench author Author name or names description Plugin description for the store in Blockbench about Longer Plugin description or instructions, can be unfolded in the store icon Blockbench icon string, see Blockbench#icons version Version number for your plugin using semver variant Variant of Blockbench which supports your plugin. Can be desktop , web or both onload function. Runs whenever the plugin is loaded or after a reload onunload function. Runs whenever the plugin unloads oninstall function. Runs when the player installs the plugin onuninstall function. Runs when the player uninstalls the plugin If you want to declare variables that can be used anywhere within the plugin, you can wrap your whole within a self-invoking function and create variables like this: (function() { var plugin_variable_1; Plugin.register('plugin_id', { onload() { plugin_variable_1 = 'foo'; }, ... }); })(); To test your plugin, you can load it from the plugin menu using the button in the title bar, or you can simply drag and drop it into Blockbench. Use the Plugin menu or press Ctrl/Cmd + J to reload it.","title":"Creating a plugin"},{"location":"plugin/#submitting-your-plugin","text":"For testing or internal use you can load the plugin from the file. If you think your plugin can be useful for a larger group of users, you can submit it to the blockbench-plugins repository . To submit a plugin, fork the repository and add your plugin to the /plugins folder. Then add your plugin to the plugins.json file using the same ID and metadata as in your plugin file. When you are done, create a pull request and wait for it to be merged. Use the same process to submit updates and changes to your plugin.","title":"Submitting your plugin"},{"location":"preview/","text":"Preview Screenshots","title":"Preview"},{"location":"preview/#preview","text":"","title":"Preview"},{"location":"preview/#screenshots","text":"","title":"Screenshots"},{"location":"textures/","text":"Textures Textures are saved in the global textures array. textures.selected will return the currently selected texture. If single_texture is enabled in the current format, only one texture can exist at a time. new Texture( data, uuid ) Creates a new texture id Texture key used in java edition and OBJ models name Texture name folder Subfolder of the textures folder that the texture is in. namespace Texture namespace, used for mods path Full texture path particle Whether to use the texture as the particle texture for java edition models source Source string of the texture. Can either be a base64 string or a path. Paths will usually have ?2 or similar appended to make them update after being changed. selected Whether the texture is selected show_icon Whether the source of the texture should be displayed in the textures list. dark_box If true, the UV editor will use a dark border for this texture. Calculated from the average color of the texture error Numerical error code: 0 No errors 1 File error, texture could not be loaded 2 Invalid aspect ratio 3 Placeholder texture, the actual texture gets defined by the parent model width Texture width height Texture height ratio Texture aspect ratio frameCount Returns the frame count if the texture is an animated texture img HTML Image instance of the texture saved Whether the texture is saved mode How the texture source is handled. Can be 'link' or 'bitmap' . Link textures are loaded from a path on the computer, so textures in the web app are always mode bitmap. uuid Texture uuid. Canvas.materials[texture.uuid] THREE.JS materials are saved in a separate location to increase performance. You can get the material using the texture's uuid. texture.getErrorMessage() Returns the translated error message of the texture. texture.extend( data: Object ) Copy properties from data into the texture. load( callback: Function ) Loads the texture by updating its source. callback function to call after the update is finished. The update is asynchronous. Loading Textures texture.fromJavaLink( link: String, path_array: Array ) Tries to load the texture from a java edition resource pack using the relative path provided in the model file and the absolute path of the model. texture.fromFile( file: String ) Loads the texture from a file object, as used in Blockbench.import. texture.fromPath( path: String ) Loads the texture from an absolute path. texture.fromDataURL( data_url: String ) Loads the texture from a data URL (base64 encoded image) texture.fromDefaultPack() Attempts to load the texture from the default resource pack if defined in the Blockbench settings. texture.loadEmpty( error_id: Number ) Loads the texture with an empty (error) texture and sets the error code to error_id . texture.add( undo: Boolean ) Adds the texture to Blockbench and takes care of applying the texture to all cubes if required by the format. undo Whether to create an undo point for adding the texture. texture.generateFolder( path: String ) Generate the java edition texture folder from a given path. Updating textures texture.updateSource( data_url: String ) Updates the source of the texture. This is used if the texture gets edited. Also updates the material and UV Editor view of the texture texture.updateMaterial() Only update the THREE.JS material of the texture. texture.reopen( force: Boolean ) Opens a file dialog to replace the texture source with another file. force If true, Blockbench won't show a warning message if the texture has unsaved changes. texture.reloadTexture() Reloads the texture to update changes to the file. This is usually not necessary as the texture updates automatically when there are any changes. Handling textures texture.select( event: Event ) Select this texture. texture.remove( no_update: Boolean ) Removes the texture. no_update If true, don't update the interface and don't create an undo point enableParticle() Marks this texture as particle texture for java edition models. fillParticle() Marks this texture as particle texture for java edition models, unless there is already a particle texture. apply( all: Boolean ) Applies the texture to all selected cubes. Creates an undo point. all When true, apply the texture to all faces texture.javaTextureLink() Returns the link of the texture as used in java edition block/item models. Texture Menu texture.openFolder() Show the source file of the texture in a new Explorer/Finder window. texture.openEditor() Open the texture in the preferred image editor as specified in the settings. texture.showContextMenu( event ) Show the context menu of the texture using the position of the event. texture.openMenu() Opens the texture menu dialog. Editing Textures texture.edit( callback: Function, options: Object ) Edits the texture using the callback function. * callback Function to edit the texture. If omitted, the texture will be converted to an editable texture but won't be edited. texture.save( as: Boolean ) Saves changes to the texture. * as If true, a file dialog will be opened even if the location of the file is known. texture.getBase64() Returns the base64 string of the texture. TextureAnimator Tool to control animated textures. TextureAnimator.start() TextureAnimator.stop() TextureAnimator.toggle() TextureAnimator.updateSpeed() Updates the playback speed of animated textures. TextureAnimator.reset() Sets all animated textures back to frame 0 and stops playing. TextureAnimator.updateButton() Updates whether the animation button displays a play or pause icon.","title":"Textures"},{"location":"textures/#textures","text":"Textures are saved in the global textures array. textures.selected will return the currently selected texture. If single_texture is enabled in the current format, only one texture can exist at a time.","title":"Textures"},{"location":"textures/#new-texture-data-uuid","text":"Creates a new texture id Texture key used in java edition and OBJ models name Texture name folder Subfolder of the textures folder that the texture is in. namespace Texture namespace, used for mods path Full texture path particle Whether to use the texture as the particle texture for java edition models source Source string of the texture. Can either be a base64 string or a path. Paths will usually have ?2 or similar appended to make them update after being changed. selected Whether the texture is selected show_icon Whether the source of the texture should be displayed in the textures list. dark_box If true, the UV editor will use a dark border for this texture. Calculated from the average color of the texture error Numerical error code: 0 No errors 1 File error, texture could not be loaded 2 Invalid aspect ratio 3 Placeholder texture, the actual texture gets defined by the parent model width Texture width height Texture height ratio Texture aspect ratio frameCount Returns the frame count if the texture is an animated texture img HTML Image instance of the texture saved Whether the texture is saved mode How the texture source is handled. Can be 'link' or 'bitmap' . Link textures are loaded from a path on the computer, so textures in the web app are always mode bitmap. uuid Texture uuid.","title":"new Texture( data, uuid )"},{"location":"textures/#canvasmaterialstextureuuid","text":"THREE.JS materials are saved in a separate location to increase performance. You can get the material using the texture's uuid.","title":"Canvas.materials[texture.uuid]"},{"location":"textures/#texturegeterrormessage","text":"Returns the translated error message of the texture.","title":"texture.getErrorMessage()"},{"location":"textures/#textureextend-data-object","text":"Copy properties from data into the texture.","title":"texture.extend( data: Object )"},{"location":"textures/#load-callback-function","text":"Loads the texture by updating its source. callback function to call after the update is finished. The update is asynchronous.","title":"load( callback: Function )"},{"location":"textures/#loading-textures","text":"","title":"Loading Textures"},{"location":"textures/#texturefromjavalink-link-string-path_array-array","text":"Tries to load the texture from a java edition resource pack using the relative path provided in the model file and the absolute path of the model.","title":"texture.fromJavaLink( link: String, path_array: Array )"},{"location":"textures/#texturefromfile-file-string","text":"Loads the texture from a file object, as used in Blockbench.import.","title":"texture.fromFile( file: String )"},{"location":"textures/#texturefrompath-path-string","text":"Loads the texture from an absolute path.","title":"texture.fromPath( path: String )"},{"location":"textures/#texturefromdataurl-data_url-string","text":"Loads the texture from a data URL (base64 encoded image)","title":"texture.fromDataURL( data_url: String )"},{"location":"textures/#texturefromdefaultpack","text":"Attempts to load the texture from the default resource pack if defined in the Blockbench settings.","title":"texture.fromDefaultPack()"},{"location":"textures/#textureloadempty-error_id-number","text":"Loads the texture with an empty (error) texture and sets the error code to error_id .","title":"texture.loadEmpty( error_id: Number )"},{"location":"textures/#textureadd-undo-boolean","text":"Adds the texture to Blockbench and takes care of applying the texture to all cubes if required by the format. undo Whether to create an undo point for adding the texture.","title":"texture.add( undo: Boolean )"},{"location":"textures/#texturegeneratefolder-path-string","text":"Generate the java edition texture folder from a given path.","title":"texture.generateFolder( path: String )"},{"location":"textures/#updating-textures","text":"","title":"Updating textures"},{"location":"textures/#textureupdatesource-data_url-string","text":"Updates the source of the texture. This is used if the texture gets edited. Also updates the material and UV Editor view of the texture","title":"texture.updateSource( data_url: String )"},{"location":"textures/#textureupdatematerial","text":"Only update the THREE.JS material of the texture.","title":"texture.updateMaterial()"},{"location":"textures/#texturereopen-force-boolean","text":"Opens a file dialog to replace the texture source with another file. force If true, Blockbench won't show a warning message if the texture has unsaved changes.","title":"texture.reopen( force: Boolean )"},{"location":"textures/#texturereloadtexture","text":"Reloads the texture to update changes to the file. This is usually not necessary as the texture updates automatically when there are any changes.","title":"texture.reloadTexture()"},{"location":"textures/#handling-textures","text":"","title":"Handling textures"},{"location":"textures/#textureselect-event-event","text":"Select this texture.","title":"texture.select( event: Event )"},{"location":"textures/#textureremove-no_update-boolean","text":"Removes the texture. no_update If true, don't update the interface and don't create an undo point","title":"texture.remove( no_update: Boolean )"},{"location":"textures/#enableparticle","text":"Marks this texture as particle texture for java edition models.","title":"enableParticle()"},{"location":"textures/#fillparticle","text":"Marks this texture as particle texture for java edition models, unless there is already a particle texture.","title":"fillParticle()"},{"location":"textures/#apply-all-boolean","text":"Applies the texture to all selected cubes. Creates an undo point. all When true, apply the texture to all faces","title":"apply( all: Boolean )"},{"location":"textures/#texturejavatexturelink","text":"Returns the link of the texture as used in java edition block/item models.","title":"texture.javaTextureLink()"},{"location":"textures/#texture-menu","text":"","title":"Texture Menu"},{"location":"textures/#textureopenfolder","text":"Show the source file of the texture in a new Explorer/Finder window.","title":"texture.openFolder()"},{"location":"textures/#textureopeneditor","text":"Open the texture in the preferred image editor as specified in the settings.","title":"texture.openEditor()"},{"location":"textures/#textureshowcontextmenu-event","text":"Show the context menu of the texture using the position of the event.","title":"texture.showContextMenu( event )"},{"location":"textures/#textureopenmenu","text":"Opens the texture menu dialog.","title":"texture.openMenu()"},{"location":"textures/#editing-textures","text":"","title":"Editing Textures"},{"location":"textures/#textureedit-callback-function-options-object","text":"Edits the texture using the callback function. * callback Function to edit the texture. If omitted, the texture will be converted to an editable texture but won't be edited.","title":"texture.edit( callback: Function, options: Object )"},{"location":"textures/#texturesave-as-boolean","text":"Saves changes to the texture. * as If true, a file dialog will be opened even if the location of the file is known.","title":"texture.save( as: Boolean )"},{"location":"textures/#texturegetbase64","text":"Returns the base64 string of the texture.","title":"texture.getBase64()"},{"location":"textures/#textureanimator","text":"Tool to control animated textures.","title":"TextureAnimator"},{"location":"textures/#textureanimatorstart","text":"","title":"TextureAnimator.start()"},{"location":"textures/#textureanimatorstop","text":"","title":"TextureAnimator.stop()"},{"location":"textures/#textureanimatortoggle","text":"","title":"TextureAnimator.toggle()"},{"location":"textures/#textureanimatorupdatespeed","text":"Updates the playback speed of animated textures.","title":"TextureAnimator.updateSpeed()"},{"location":"textures/#textureanimatorreset","text":"Sets all animated textures back to frame 0 and stops playing.","title":"TextureAnimator.reset()"},{"location":"textures/#textureanimatorupdatebutton","text":"Updates whether the animation button displays a play or pause icon.","title":"TextureAnimator.updateButton()"},{"location":"theme/","text":"Themes Themes can be designed inside Blockbench using the Layout tab in the Settings dialog. When you are done editing, you can export the theme using the button in the top toolbar. Themes can customize the app colors as well as the main font and the headline font. To customize Blockbench further, you can add custom CSS code to your theme. The easiest way to play around with custom CSS rules is to use the Chrome Dev Tools. You can open the dev tools by pressing Ctrl + Shift + I . Make sure that all CSS ends up in one line to keep the JSON file valid. Right now you can share themes in the #themes channel on the Blockbench Discord server. Structure BBStyle files are made in JSON use the following structure: { \"border\": { \"hex\": \"#ffffff\" }, \"selected\": { \"hex\": \"#ffffff\" }, \"css\": \"\" }","title":"Theme"},{"location":"theme/#themes","text":"Themes can be designed inside Blockbench using the Layout tab in the Settings dialog. When you are done editing, you can export the theme using the button in the top toolbar. Themes can customize the app colors as well as the main font and the headline font. To customize Blockbench further, you can add custom CSS code to your theme. The easiest way to play around with custom CSS rules is to use the Chrome Dev Tools. You can open the dev tools by pressing Ctrl + Shift + I . Make sure that all CSS ends up in one line to keep the JSON file valid. Right now you can share themes in the #themes channel on the Blockbench Discord server.","title":"Themes"},{"location":"theme/#structure","text":"BBStyle files are made in JSON use the following structure: { \"border\": { \"hex\": \"#ffffff\" }, \"selected\": { \"hex\": \"#ffffff\" }, \"css\": \"\" }","title":"Structure"},{"location":"ui/","text":"Interface Dialog This is a method to create a completely custom dialog window. new Dialog( options ) Creates a new dialog. options Object title Title of the dialog title Title of the dialog id ID of the dialog lines Array of HTML object strings for each line of content in the dialog. form Create a form dialog. This is an object of inputs and lines that the form consists of. Form part (Object) type ( input/textarea/select/number/color/checkbox ) Type of the input label Label of the input nocolon Whether to skip the automatic colon added to the label readonly When true, makes the input read-only value Default value placeholder Text to show when the input is empty text Text when using the text type. Supports markdown-style links. colorpicker When using the type: color , the colorpicker action to use. (optional) min / max / step Mimimum, Maximum and Step attributes for the number input height Height for textarea inputs options: Object Options ( key: \"displaytext\" ) for select inputs confirmEnabled If false, the confirm button of the dialog is disabled cancelEnabled If false, the cancel button of the dialog is disabled onConfirm Function to execute when the user confirms the dialog onCancel Function to execute when the user cancels the dialog Dialog.show() Shows the dialog. Dialog.hide() Closes the dialog. Dialog.confirm() Triggers the confirm event of the dialog. Dialog.cancel() Triggers the cancel event of the dialog. Example new Dialog({ id: 'generate_tree', title: 'Tree Generator', form: { branches: {label: 'Branches', type: 'number', value: 10, step: 1, min: 1, max: 16}, conifer: {label: 'Conifer', type: 'checkbox'}, }, onConfirm: function(formData) { TreeGenerator.generateTree(formData.branches, formData.conifer) this.hide() } }).show() Messages Blockbench.showMessageBox( options, cb ) Shows a simple message box with a title, message, an icon and buttons options Object buttons Array or strings used to generate the buttons confirm Index of the button used to confirm the dialog cancel Index of the button used to cancel the dialog translateKey Translation key used to auto-fill the title and message from translations title Dialog Title message Dialog content icon Icon string, see #Icons width Dialog width in pixels callback Called when the user exits the dialog using the buttons. result Argument, the index of the clicked button within the buttons array. Blockbench.textPrompt( title, value, callback ) Prompts the user to enter or edit a text. title Dialog title value Before value of the text callback Runs when the user confirms the prompt text Only parameter, the text entered by the user Blockbench.showQuickMessage( message[, time] ) Displays a quick message in the middle of the Blockbench interface message Message to display. Can be a translation string time How long to display the message in miliseconds. Defaults to 1000 miliseconds. Blockbench.showStatusMessage( message[, time] ) Displays a message in the status bar of Blockbench. message Message to display. Can be a translation string time How long to display the message in miliseconds. Defaults to 1000 miliseconds. Blockbench.setStatusBarText( text ) Sets a text to the status bar text Text to display. If undefined, it will return to the old value. Blockbench.notification( title, text[, icon]) Displays a push notification. In browsers, the user has to accept notifications first. title Notification title text Notification content icon Notification icon, defaults to the Blockbench icon Miscellaneous Blockbench.setProgress( progress ) Sets the progress bar below the status bar and in the taskbar/dock. progress Progress (0 is empty, 1 is full) Blockbench.openLink( link ) Opens a link in an external browser window or new tab.","title":"Interface"},{"location":"ui/#interface","text":"","title":"Interface"},{"location":"ui/#dialog","text":"This is a method to create a completely custom dialog window.","title":"Dialog"},{"location":"ui/#new-dialog-options","text":"Creates a new dialog. options Object title Title of the dialog title Title of the dialog id ID of the dialog lines Array of HTML object strings for each line of content in the dialog. form Create a form dialog. This is an object of inputs and lines that the form consists of. Form part (Object) type ( input/textarea/select/number/color/checkbox ) Type of the input label Label of the input nocolon Whether to skip the automatic colon added to the label readonly When true, makes the input read-only value Default value placeholder Text to show when the input is empty text Text when using the text type. Supports markdown-style links. colorpicker When using the type: color , the colorpicker action to use. (optional) min / max / step Mimimum, Maximum and Step attributes for the number input height Height for textarea inputs options: Object Options ( key: \"displaytext\" ) for select inputs confirmEnabled If false, the confirm button of the dialog is disabled cancelEnabled If false, the cancel button of the dialog is disabled onConfirm Function to execute when the user confirms the dialog onCancel Function to execute when the user cancels the dialog","title":"new Dialog( options )"},{"location":"ui/#dialogshow","text":"Shows the dialog.","title":"Dialog.show()"},{"location":"ui/#dialoghide","text":"Closes the dialog.","title":"Dialog.hide()"},{"location":"ui/#dialogconfirm","text":"Triggers the confirm event of the dialog.","title":"Dialog.confirm()"},{"location":"ui/#dialogcancel","text":"Triggers the cancel event of the dialog.","title":"Dialog.cancel()"},{"location":"ui/#example","text":"new Dialog({ id: 'generate_tree', title: 'Tree Generator', form: { branches: {label: 'Branches', type: 'number', value: 10, step: 1, min: 1, max: 16}, conifer: {label: 'Conifer', type: 'checkbox'}, }, onConfirm: function(formData) { TreeGenerator.generateTree(formData.branches, formData.conifer) this.hide() } }).show()","title":"Example"},{"location":"ui/#messages","text":"","title":"Messages"},{"location":"ui/#blockbenchshowmessagebox-options-cb","text":"Shows a simple message box with a title, message, an icon and buttons options Object buttons Array or strings used to generate the buttons confirm Index of the button used to confirm the dialog cancel Index of the button used to cancel the dialog translateKey Translation key used to auto-fill the title and message from translations title Dialog Title message Dialog content icon Icon string, see #Icons width Dialog width in pixels callback Called when the user exits the dialog using the buttons. result Argument, the index of the clicked button within the buttons array.","title":"Blockbench.showMessageBox( options, cb )"},{"location":"ui/#blockbenchtextprompt-title-value-callback","text":"Prompts the user to enter or edit a text. title Dialog title value Before value of the text callback Runs when the user confirms the prompt text Only parameter, the text entered by the user","title":"Blockbench.textPrompt( title, value, callback )"},{"location":"ui/#blockbenchshowquickmessage-message-time","text":"Displays a quick message in the middle of the Blockbench interface message Message to display. Can be a translation string time How long to display the message in miliseconds. Defaults to 1000 miliseconds.","title":"Blockbench.showQuickMessage( message[, time] )"},{"location":"ui/#blockbenchshowstatusmessage-message-time","text":"Displays a message in the status bar of Blockbench. message Message to display. Can be a translation string time How long to display the message in miliseconds. Defaults to 1000 miliseconds.","title":"Blockbench.showStatusMessage( message[, time] )"},{"location":"ui/#blockbenchsetstatusbartext-text","text":"Sets a text to the status bar text Text to display. If undefined, it will return to the old value.","title":"Blockbench.setStatusBarText( text )"},{"location":"ui/#blockbenchnotification-title-text-icon","text":"Displays a push notification. In browsers, the user has to accept notifications first. title Notification title text Notification content icon Notification icon, defaults to the Blockbench icon","title":"Blockbench.notification( title, text[, icon])"},{"location":"ui/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"ui/#blockbenchsetprogress-progress","text":"Sets the progress bar below the status bar and in the taskbar/dock. progress Progress (0 is empty, 1 is full)","title":"Blockbench.setProgress( progress )"},{"location":"ui/#blockbenchopenlink-link","text":"Opens a link in an external browser window or new tab.","title":"Blockbench.openLink( link )"},{"location":"undo/","text":"Undo Creating an undo point When modifying elements, textures, animations or anything else about the model, the changes need to be registered to the Undo system. This will a) create an Undo point to allow the user to undo the changes and b) synchronize the model to other users in an Edit Session. This can be achieved using Undo.initEdit and finishEdit. Undo.initEdit( aspects ) Initializes an edit. Call this when you are about to do an edit, before changing anything. aspects . Which aspects of the model to save. See #Aspects Undo.finishEdit( edit_name[, aspects] ) Wraps up and saves an edit. Call this function after doing your edit. action_name Name of the performed edit. aspects Optional. If the set of aspects you are editing has changed, provide the changed aspects. Aspects Aspects are used to tell Blockbench which parts of the model to save in an undo point. All aspects are within one aspects object. When adding or removing elements, textures etc., make sure the objects in question are stated in the first but not in the second aspects, or vice versa. Aspect Description Example selection If true, the element and group selection will be saved {selection: true} elements Array of all elements (cubes and locators) to save. {elements: [cube1, cube2, locator]} outliner If true, the complete outliner structure will be saved. This includes group data like names etc. {outliner: true} group A single group. {group: Group.selected} textures An array of textures. {textures: [texture]} bitmap If true, the content of the listed textures will be saved. {textures: [texture], bitmap: true} uv_mode When true, saves the current UV mode and project resolution settings. {uv_mode: true} animations Array of animations {animations: [Animator.selected]} keyframes Array of animation keyframes {keyframes: [keyframe]} display_slots Array of display slot ids {display_slots: ['thirdperson_righthand', 'head']} uv_only If true, only UV and face information of cubes will be saved. {elements. Cube.selected, uv_only: true} Example Undo.initEdit({elements: []}); var new_cube = new Cube({name: 'kevin'}).init(); var other_cube = new Cube({name: 'lars'}).init(); Undo.finishEdit('add new cubes', {elements: [new_cube, other_cube]});","title":"Undo"},{"location":"undo/#undo","text":"","title":"Undo"},{"location":"undo/#creating-an-undo-point","text":"When modifying elements, textures, animations or anything else about the model, the changes need to be registered to the Undo system. This will a) create an Undo point to allow the user to undo the changes and b) synchronize the model to other users in an Edit Session. This can be achieved using Undo.initEdit and finishEdit.","title":"Creating an undo point"},{"location":"undo/#undoinitedit-aspects","text":"Initializes an edit. Call this when you are about to do an edit, before changing anything. aspects . Which aspects of the model to save. See #Aspects","title":"Undo.initEdit( aspects )"},{"location":"undo/#undofinishedit-edit_name-aspects","text":"Wraps up and saves an edit. Call this function after doing your edit. action_name Name of the performed edit. aspects Optional. If the set of aspects you are editing has changed, provide the changed aspects.","title":"Undo.finishEdit( edit_name[, aspects] )"},{"location":"undo/#aspects","text":"Aspects are used to tell Blockbench which parts of the model to save in an undo point. All aspects are within one aspects object. When adding or removing elements, textures etc., make sure the objects in question are stated in the first but not in the second aspects, or vice versa. Aspect Description Example selection If true, the element and group selection will be saved {selection: true} elements Array of all elements (cubes and locators) to save. {elements: [cube1, cube2, locator]} outliner If true, the complete outliner structure will be saved. This includes group data like names etc. {outliner: true} group A single group. {group: Group.selected} textures An array of textures. {textures: [texture]} bitmap If true, the content of the listed textures will be saved. {textures: [texture], bitmap: true} uv_mode When true, saves the current UV mode and project resolution settings. {uv_mode: true} animations Array of animations {animations: [Animator.selected]} keyframes Array of animation keyframes {keyframes: [keyframe]} display_slots Array of display slot ids {display_slots: ['thirdperson_righthand', 'head']} uv_only If true, only UV and face information of cubes will be saved. {elements. Cube.selected, uv_only: true}","title":"Aspects"},{"location":"undo/#example","text":"Undo.initEdit({elements: []}); var new_cube = new Cube({name: 'kevin'}).init(); var other_cube = new Cube({name: 'lars'}).init(); Undo.finishEdit('add new cubes', {elements: [new_cube, other_cube]});","title":"Example"},{"location":"utility/","text":"Utility Blockbench comes with a bunch of custom utility functions to make the life of developers easier. General Things Condition( condition: Boolean/Function/undefined [, context: Object ]) Returns true if the condition checks out. Conditions can be * Simple booleans * Functions returning a value * If the condition is undefined, it will return true oneLiner( data: Object ) Used as a wrapper for an object to tell the JSON exporter to print the entire Object in one line. cl() A simple shortcut for console.log guid() Generates a uuid. Example: df818b11-0785-2753-599a-95d6818ed846 isUUID( uuid: String ) returns true if uuid is in fact a UUID. bbuid( length: Number ) Returns a short random unique identifier using the given length and the characters [a-zA-Z0-9]. autoStringify( object: Object ) Compiles the object to a JSON string using the Blockbench custom JSON compiler under consideration of the minified output setting. pathToName( path: String[, extension: String] ) Turns the file path path into the corresponding file name, including file extension of extension is set to true. pathToExtension( path: String ) Returns the extension of a file path or name. Libraries DOM Manipulation Blockbench uses jQuery as a simple way to interact with the DOM. Colors Blockbench uses Spectrum as a Color picker and tinycolor as a color handling and conversion library. Images can be manupulated using Jimp but for simpler edits I recommend to use the HTML5 canvas since it is a lot faster. 3D Editor THREE.JS is used to display and handle the 3D preview. Read the three.js docs for more info. Math Math.radToDeg( rad ) Converts radiants into degrees Math.degToRad( deg ) Converts degrees into radiants Math.roundTo( number, digits ) Rounds the number number to digits decimal places. Math.lerp( a, b, m ) Lerps between the values a and b using lerp (between 0 and 1) Math.isBetween( n, a, b ) Returns true if n is in between a and b . Math.trimDeg( deg ) Trims the given degree number to a normalized value between -180 and 180. Math.isPowerOfTwo( x ) Returns true if x is a power of two. Math.randomab( a, b ) Returns a random number between a and b Math.clamp( n, a, b ) Clamps the number n to a number in between or equal to a or b . Math.areMultiples( a, b ) Returns true if a is a multiple of b or vice versa. trimFloatNumber( n ) Trims the given float to a readable by rounding it to 4 decimal places maximum, to avoid values such as 1.59999999 getAxisNumber( letter: String ) Converts an axis letter ( x, y, z ) into an axis number ( 0, 1, 2 ) getAxisLetter( number: Number ) Converts an axis number ( 0, 1, 2 ) into an axis letter ( x, y, z ) Dates Date.getDateArray() Returns an array of the date of Date in the format [d, m, yyyy] Date.getDateString() Returns a string of the data Date in the format \"dd.mm.yyyy\" Date.dayOfYear() Returns the day of the year Array Array.safePush( item: Any ) Pushes item to Array only if it is not in the array yet. Array.equals( array: Array ) Checks if Array and array have the same content. Array.remove( item: Any ) Removes item from Array Array.empty() Empties the array Array.purge() Empties an array while also updating it for VueJS Array.findInArray( key: String, value: Any ) Find an object in the array by looking for a key: value match Array.last() Returns the last item of the array Array.positiveItems() Returns the number of truthy items in the array. Array.allEqual( value: Any ) Returns true if all items in the array equal value . Array.random() Returns a random item of the array. Array.forEachReverse( callback: Function ) Runs the function callback for each item in the list, starting from the end.","title":"Utility"},{"location":"utility/#utility","text":"Blockbench comes with a bunch of custom utility functions to make the life of developers easier.","title":"Utility"},{"location":"utility/#general-things","text":"","title":"General Things"},{"location":"utility/#condition-condition-booleanfunctionundefined-context-object","text":"Returns true if the condition checks out. Conditions can be * Simple booleans * Functions returning a value * If the condition is undefined, it will return true","title":"Condition( condition: Boolean/Function/undefined [, context: Object ])"},{"location":"utility/#oneliner-data-object","text":"Used as a wrapper for an object to tell the JSON exporter to print the entire Object in one line.","title":"oneLiner( data: Object )"},{"location":"utility/#cl","text":"A simple shortcut for console.log","title":"cl()"},{"location":"utility/#guid","text":"Generates a uuid. Example: df818b11-0785-2753-599a-95d6818ed846","title":"guid()"},{"location":"utility/#isuuid-uuid-string","text":"returns true if uuid is in fact a UUID.","title":"isUUID( uuid: String )"},{"location":"utility/#bbuid-length-number","text":"Returns a short random unique identifier using the given length and the characters [a-zA-Z0-9].","title":"bbuid( length: Number )"},{"location":"utility/#autostringify-object-object","text":"Compiles the object to a JSON string using the Blockbench custom JSON compiler under consideration of the minified output setting.","title":"autoStringify( object: Object )"},{"location":"utility/#pathtoname-path-string-extension-string","text":"Turns the file path path into the corresponding file name, including file extension of extension is set to true.","title":"pathToName( path: String[, extension: String] )"},{"location":"utility/#pathtoextension-path-string","text":"Returns the extension of a file path or name.","title":"pathToExtension( path: String )"},{"location":"utility/#libraries","text":"","title":"Libraries"},{"location":"utility/#dom-manipulation","text":"Blockbench uses jQuery as a simple way to interact with the DOM.","title":"DOM Manipulation"},{"location":"utility/#colors","text":"Blockbench uses Spectrum as a Color picker and tinycolor as a color handling and conversion library. Images can be manupulated using Jimp but for simpler edits I recommend to use the HTML5 canvas since it is a lot faster.","title":"Colors"},{"location":"utility/#3d-editor","text":"THREE.JS is used to display and handle the 3D preview. Read the three.js docs for more info.","title":"3D Editor"},{"location":"utility/#math","text":"","title":"Math"},{"location":"utility/#mathradtodeg-rad","text":"Converts radiants into degrees","title":"Math.radToDeg( rad )"},{"location":"utility/#mathdegtorad-deg","text":"Converts degrees into radiants","title":"Math.degToRad( deg )"},{"location":"utility/#mathroundto-number-digits","text":"Rounds the number number to digits decimal places.","title":"Math.roundTo( number, digits )"},{"location":"utility/#mathlerp-a-b-m","text":"Lerps between the values a and b using lerp (between 0 and 1)","title":"Math.lerp( a, b, m )"},{"location":"utility/#mathisbetween-n-a-b","text":"Returns true if n is in between a and b .","title":"Math.isBetween( n, a, b )"},{"location":"utility/#mathtrimdeg-deg","text":"Trims the given degree number to a normalized value between -180 and 180.","title":"Math.trimDeg( deg )"},{"location":"utility/#mathispoweroftwo-x","text":"Returns true if x is a power of two.","title":"Math.isPowerOfTwo( x )"},{"location":"utility/#mathrandomab-a-b","text":"Returns a random number between a and b","title":"Math.randomab( a, b )"},{"location":"utility/#mathclamp-n-a-b","text":"Clamps the number n to a number in between or equal to a or b .","title":"Math.clamp( n, a, b )"},{"location":"utility/#matharemultiples-a-b","text":"Returns true if a is a multiple of b or vice versa.","title":"Math.areMultiples( a, b )"},{"location":"utility/#trimfloatnumber-n","text":"Trims the given float to a readable by rounding it to 4 decimal places maximum, to avoid values such as 1.59999999","title":"trimFloatNumber( n )"},{"location":"utility/#getaxisnumber-letter-string","text":"Converts an axis letter ( x, y, z ) into an axis number ( 0, 1, 2 )","title":"getAxisNumber( letter: String )"},{"location":"utility/#getaxisletter-number-number","text":"Converts an axis number ( 0, 1, 2 ) into an axis letter ( x, y, z )","title":"getAxisLetter( number: Number )"},{"location":"utility/#dates","text":"","title":"Dates"},{"location":"utility/#dategetdatearray","text":"Returns an array of the date of Date in the format [d, m, yyyy]","title":"Date.getDateArray()"},{"location":"utility/#dategetdatestring","text":"Returns a string of the data Date in the format \"dd.mm.yyyy\"","title":"Date.getDateString()"},{"location":"utility/#datedayofyear","text":"Returns the day of the year","title":"Date.dayOfYear()"},{"location":"utility/#array","text":"","title":"Array"},{"location":"utility/#arraysafepush-item-any","text":"Pushes item to Array only if it is not in the array yet.","title":"Array.safePush( item: Any )"},{"location":"utility/#arrayequals-array-array","text":"Checks if Array and array have the same content.","title":"Array.equals( array: Array )"},{"location":"utility/#arrayremove-item-any","text":"Removes item from Array","title":"Array.remove( item: Any )"},{"location":"utility/#arrayempty","text":"Empties the array","title":"Array.empty()"},{"location":"utility/#arraypurge","text":"Empties an array while also updating it for VueJS","title":"Array.purge()"},{"location":"utility/#arrayfindinarray-key-string-value-any","text":"Find an object in the array by looking for a key: value match","title":"Array.findInArray( key: String, value: Any )"},{"location":"utility/#arraylast","text":"Returns the last item of the array","title":"Array.last()"},{"location":"utility/#arraypositiveitems","text":"Returns the number of truthy items in the array.","title":"Array.positiveItems()"},{"location":"utility/#arrayallequal-value-any","text":"Returns true if all items in the array equal value .","title":"Array.allEqual( value: Any )"},{"location":"utility/#arrayrandom","text":"Returns a random item of the array.","title":"Array.random()"},{"location":"utility/#arrayforeachreverse-callback-function","text":"Runs the function callback for each item in the list, starting from the end.","title":"Array.forEachReverse( callback: Function )"}]}